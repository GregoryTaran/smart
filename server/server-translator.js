import fs from 'fs';
import path from 'path';
import fetch from 'node-fetch';
import FormData from 'form-data';
import { logToFile } from './utils.js';  // –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;  // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á API –¥–ª—è OpenAI

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Float32Array –≤ WAV
 * @param {Float32Array} audioData - –î–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ—Ä–µ–π–º–∞
 * @param {number} sampleRate - –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
 * @returns {Buffer} - –ë—É—Ñ–µ—Ä WAV
 */
function floatToWav(audioData, sampleRate) {
  const buffer = Buffer.alloc(audioData.length * 2);
  for (let i = 0; i < audioData.length; i++) {
    buffer.writeInt16LE(audioData[i] * 32767, i * 2);  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 16-–±–∏—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  }

  const header = Buffer.alloc(44);
  header.write('RIFF', 0);
  header.writeUInt32LE(36 + buffer.length, 4);  // –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä
  header.write('WAVE', 8);
  header.write('fmt ', 12);
  header.writeUInt32LE(16, 16);  // –†–∞–∑–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
  header.writeUInt16LE(1, 20);  // PCM
  header.writeUInt16LE(1, 22);  // –û–¥–∏–Ω –∫–∞–Ω–∞–ª (–º–æ–Ω–æ)
  header.writeUInt32LE(sampleRate, 24);  // –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
  header.writeUInt32LE(sampleRate * 2, 28);  // byte rate
  header.writeUInt16LE(2, 32);  // block align
  header.writeUInt16LE(16, 34);  // –±–∏—Ç–æ–≤–∞—è –≥–ª—É–±–∏–Ω–∞
  header.write('data', 36);
  header.writeUInt32LE(buffer.length, 40);  // –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö

  return Buffer.concat([header, buffer]);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ WAV
 * @param {string} sessionId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
 * @param {Float32Array[]} chunks - –ú–∞—Å—Å–∏–≤ –∞—É–¥–∏–æ-—á–∞–Ω–∫–æ–≤
 * @param {number} sampleRate - –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
 * @returns {string} - –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
 */
export function processChunks(sessionId, chunks, sampleRate) {
  try {
    if (!chunks || chunks.length === 0) {
      logToFile(`‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ—Å—Å–∏–∏: ${sessionId}`);
      return null;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
    const fullBuffer = Buffer.concat(chunks.map(chunk => floatToWav(chunk, sampleRate)));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const filename = `${sessionId}_merged.wav`;
    fs.writeFileSync(filename, fullBuffer);
    logToFile(`üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª: ${filename}`);
    return filename;
  } catch (error) {
    logToFile(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏: ${sessionId}, –æ—à–∏–±–∫–∞: ${error.message}`);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏: ${sessionId}, –æ—à–∏–±–∫–∞: ${error.message}`);
    return null;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
 * @param {string} sessionId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
 * @param {string} langPair - –Ø–∑—ã–∫–æ–≤–∞—è –ø–∞—Ä–∞
 */
export async function processWhisper(sessionId, langPair) {
  try {
    const filePath = `${sessionId}_merged.wav`; // –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É WAV —Ñ–∞–π–ª—É
    const form = new FormData();
    form.append('file', fs.createReadStream(filePath));
    form.append('model', 'whisper-1');
    form.append('response_format', 'verbose_json');
    form.append('task', 'transcribe');

    const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${OPENAI_API_KEY}` },
      body: form
    });

    const data = await response.json();
    console.log('Whisper response:', data);
    logToFile(`Whisper response: ${JSON.stringify(data)}`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Whisper
    const text = data.text || '';
    const detectedLang = data.language || null;
    return { text, detectedLang };
  } catch (e) {
    logToFile(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ Whisper –¥–ª—è —Å–µ—Å—Å–∏–∏: ${sessionId}, –æ—à–∏–±–∫–∞: ${e.message}`);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ Whisper –¥–ª—è —Å–µ—Å—Å–∏–∏: ${sessionId}, –æ—à–∏–±–∫–∞: ${e.message}`);
    return null;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ GPT
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param {string} langPair - –Ø–∑—ã–∫–æ–≤–∞—è –ø–∞—Ä–∞
 * @param {string} detectedLang - –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —è–∑—ã–∫
 * @returns {string} - –û—Ç–≤–µ—Ç –æ—Ç GPT
 */
export async function processGPT(text, langPair, detectedLang) {
  try {
    const [a, b] = langPair.split("-");
    let prompt = text;

    let from = detectedLang || a;
    const to = from === a ? b : a;
    prompt = `Translate from ${from.toUpperCase()} to ${to.toUpperCase()}: ${text}`;

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: prompt }],
      }),
    });

    const data = await response.json();
    return data.choices?.[0]?.message?.content ?? "";
  } catch (e) {
    logToFile(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ GPT –¥–ª—è —Å–µ—Å—Å–∏–∏: ${sessionId}, –æ—à–∏–±–∫–∞: ${e.message}`);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ GPT –¥–ª—è —Å–µ—Å—Å–∏–∏: ${sessionId}, –æ—à–∏–±–∫–∞: ${e.message}`);
    return "";
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é TTS
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏
 * @param {string} sessionId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
 * @param {string} voice - –ì–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏
 */
export async function processTTS(text, sessionId, voice = "alloy") {
  try {
    const response = await fetch("https://api.openai.com/v1/audio/speech", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o-mini-tts",
        voice: voice,
        input: text,
      }),
    });

    const audio = await response.arrayBuffer();
    const audioFilePath = `${sessionId}_tts.mp3`;
    fs.writeFileSync(audioFilePath, Buffer.from(audio));
    logToFile(`üîä –°–æ—Ö—Ä–∞–Ω—ë–Ω TTS —Ñ–∞–π–ª: ${audioFilePath}`);
    return audioFilePath;
  } catch (e) {
    logToFile(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ TTS –¥–ª—è —Å–µ—Å—Å–∏–∏: ${sessionId}, –æ—à–∏–±–∫–∞: ${e.message}`);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ TTS –¥–ª—è —Å–µ—Å—Å–∏–∏: ${sessionId}, –æ—à–∏–±–∫–∞: ${e.message}`);
    return "";
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ server.js
export async function processAudioAndText({ sessionId, audioData, langPair, voice, sampleRate }) {
  try {
    // –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ:
    const filename = await processChunks(sessionId, [audioData], sampleRate);  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è WAV

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    const whisperResult = await processWhisper(sessionId, langPair);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ GPT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const gptResult = await processGPT(whisperResult.text, langPair, whisperResult.detectedLang);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ —á–µ—Ä–µ–∑ TTS
    const ttsResult = await processTTS(gptResult, sessionId, voice);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–æ–≤
    return {
      text: gptResult,
      ttsUrl: ttsResult
    };

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error.message);
    return null;
  }
}
