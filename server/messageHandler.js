import fs from "fs";
import path from "path";
import { floatToWav } from "./floatToWav"; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π –ø—É—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
const TMP_DIR = path.join("smart", "translator", "tmp"); // –ü—É—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—Ä–æ–≤–Ω—è–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
function logToFile(message, level = "INFO") {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] [${level}] ${message}\n`;
  fs.appendFileSync("server.log", logMessage);
  console.log(logMessage);  // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export async function handleBinaryData(ws, data) {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logToFile(`üì© Binary data received for session ${ws.sessionId}, length: ${data.length}`, "INFO");

    const buf = Buffer.isBuffer(data) ? data : Buffer.from(data);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä
    if (!buf.length) {
      ws.send("‚ö†Ô∏è Empty binary chunk skipped");
      logToFile(`‚ö†Ô∏è Empty binary chunk skipped for session ${ws.sessionId}`, "WARN");
      return;
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
    console.log(`üéß Buffer received: ${buf.length} bytes`);

    // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –∫—Ä–∞—Ç–Ω–æ 4
    const offset = buf.byteOffset % 4 === 0 ? buf.byteOffset : buf.byteOffset + (4 - buf.byteOffset % 4);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –≤ Float32Array
    const f32 = new Float32Array(buf.buffer, offset, Math.floor(buf.byteLength / 4));
    console.log(`üéß Converted to Float32Array: ${f32.length} samples`);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV —Ñ–æ—Ä–º–∞—Ç
    const wav = floatToWav(f32, ws.sampleRate || 44100);
    const filename = `${ws.sessionId}_chunk_${ws.chunkCounter || 0}.wav`;
    ws.chunkCounter = (ws.chunkCounter || 0) + 1;

    // –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const filePath = path.join(TMP_DIR, filename);
    console.log(`üéß Saving to: ${filePath}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º WAV —Ñ–∞–π–ª
    fs.writeFileSync(filePath, wav);
    logToFile(`üíæ Saved ${filename}`, "INFO");
    ws.send(`üíæ Saved ${filename}`);
  } catch (err) {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logToFile(`‚ùå Binary handler error: ${err.message}`, "ERROR");
    console.error("‚ùå Binary handler error:", err);
    ws.send("‚ùå Binary handler crashed: " + err.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
export function handleRegister(ws, data, sessionCounter) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (!data || !data.module) {
      ws.send("‚ùå Missing module in registration data");
      logToFile(`‚ùå Missing module in registration for session ${ws.sessionId}`, "ERROR");
      return;
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ sessionId
    ws.module = data.module;
    ws.sampleRate = data.sampleRate || 44100;
    ws.sessionId = `${ws.module}-${sessionCounter}`;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    ws.send(`SESSION:${ws.sessionId}`);
    logToFile(`‚úÖ Registered module: ${ws.module}, Session ID: ${ws.sessionId}`, "INFO");
  } catch (err) {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    logToFile(`‚ùå Registration error for session ${ws.sessionId}: ${err.message}`, "ERROR");
    ws.send("‚ùå Error during registration");
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á
export function handleError(ws, error) {
  logToFile(`‚ùå Error in session ${ws.sessionId}: ${error.message}`, "ERROR");
  ws.send("‚ùå Error: " + error.message);
}
