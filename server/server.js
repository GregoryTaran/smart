import express from 'express';
import path from 'path';
import http from 'http';
import { WebSocketServer } from 'ws';
import { logToFile } from './utils.js';  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import fs from 'fs';  // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
import { handleSessionRegistration } from './server-translator.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ server-translator.js

const PORT = process.env.PORT || 10000; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π

const app = express();
const httpServer = http.createServer(app);  // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP –≤–º–µ—Å—Ç–æ HTTPS
const wss = new WebSocketServer({ server: httpServer });

const sessions = new Map();
let sessionCounter = 1;

// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–π
const sessionState = new Map();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º process.cwd() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏
const indexPath = path.join(process.cwd(), 'index.html');
const smartIndexPath = path.join(process.cwd(), 'smart', 'index.html');

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ smart
app.use("/smart", express.static(path.join(process.cwd(), "smart")));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (https://test.smartvision.life/)
app.get("/", (req, res) => {
  console.log("Request for root (/) received");
  logToFile("Request for root (/) received");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª index.html –≤ –∫–æ—Ä–Ω–µ
  if (fs.existsSync(indexPath)) {
    res.sendFile(indexPath); // –û—Ç–¥–∞—ë–º index.html –∏–∑ –∫–æ—Ä–Ω—è
  } else {
    res.status(404).send("404 - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
  }
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è /smart (https://test.smartvision.life/smart/)
app.get("/smart", (req, res) => {
  console.log("Request for /smart received");
  logToFile("Request for /smart received");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª index.html –≤ –ø–∞–ø–∫–µ smart
  if (fs.existsSync(smartIndexPath)) {
    res.sendFile(smartIndexPath); // –û—Ç–¥–∞—ë–º index.html –∏–∑ –ø–∞–ø–∫–∏ smart
  } else {
    res.status(404).send("404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ /smart –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
httpServer.listen(PORT, () => {
  logToFile(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  console.log(`üåê WebSocket –∏ HTTP —Å–µ—Ä–≤–µ—Ä—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
wss.on("connection", (ws) => {
  ws.isAlive = true;
  ws.id = Date.now().toString(36) + Math.random().toString(36).slice(2, 6);
  ws.sessionId = null;
  ws.module = null;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  sessionState.set(ws.id, { status: 'connected', data: {} });

  ws.send("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Smart Vision WS");

  ws.on("pong", () => (ws.isAlive = true));

  ws.on("message", (msg) => {
    try {
      const data = JSON.parse(msg);
      if (data.type === "register") {
        const sessionId = `sess-${sessionCounter++}`;
        ws.sessionId = sessionId;
        sessions.set(sessionId, ws);

        // –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ server-translator –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—É–∫–≤—ã "a"
        const updatedSessionId = handleSessionRegistration(sessionId);  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –±—É–∫–≤—É "a" –∫ ID

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
        sessionState.set(ws.id, { status: 'registered', sessionId: updatedSessionId });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç—É
        ws.send(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ. ID —Å–µ—Å—Å–∏–∏: ${updatedSessionId}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        console.log(`‚úÖ –°–µ—Å—Å–∏—è: "${updatedSessionId}"`);
        logToFile(`‚úÖ –°–µ—Å—Å–∏—è: "${updatedSessionId}"`);
      } else {
        ws.send("‚ùî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–æ–¥—É–ª—å");
      }
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", e.message);
      logToFile(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}`);
      ws.send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
    }
  });

  ws.on("close", () => {
    logToFile(`‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: ${ws.sessionId}`);
    sessionState.delete(ws.id);  // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    sessions.delete(ws.sessionId);
  });

  ws.on("error", (err) => {
    logToFile(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${err.message}`);
    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${err.message}`);
  });
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π (ping/pong)
setInterval(() => {
  wss.clients.forEach((ws) => {
    if (!ws.isAlive) {
      sessionState.delete(ws.id);  // –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
      return ws.terminate();
    }
    ws.isAlive = false;
    ws.ping();
  });
}, 15000);
