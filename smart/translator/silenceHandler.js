// silenceHandler.js

let silenceTimer = null;  // –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–ª—á–∞–Ω–∏—è
let buffer = [];
let lastSend = Date.now();

// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–∏—à–∏–Ω—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏–≥–Ω–∞–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
export function checkSilence(chunk, ws, processSession) {
  const level = rms(chunk);  // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏

  if (level < 0.01) { // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π (—Ç–∏—à–∏–Ω–∞)
    if (!silenceTimer) {
      silenceTimer = setTimeout(() => {
        // –î–µ—Ç–µ–∫—Ü–∏—è —Ç–∏—à–∏–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        log("ü§´ Detected silence ‚Äî sending signal to server");
        sendBlock(ws);
        processSession();  // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Whisper, GPT)
        silenceTimer = null; // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
      }, 2000); // –û–∂–∏–¥–∞–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –º–æ–ª—á–∞–Ω–∏—è
    }
  } else {
    if (silenceTimer) {
      clearTimeout(silenceTimer);  // –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª—Å—è –∑–≤—É–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      silenceTimer = null;
    }
  }

  const now = Date.now();
  if (now - lastSend >= 1000) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 1000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ (1 —Å–µ–∫—É–Ω–¥–∞)
    sendBlock(ws);
    lastSend = now; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è RMS (—É—Ä–æ–≤–Ω—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏)
function rms(chunk) {
  let sum = 0;
  for (let i = 0; i < chunk.length; i++) {
    sum += chunk[i] * chunk[i];
  }
  return Math.sqrt(sum / chunk.length);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
function sendBlock(ws) {
  if (!buffer.length || !ws || ws.readyState !== WebSocket.OPEN) return;
  const full = concat(buffer);
  ws.send(full.buffer);
  buffer = []; // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
  log(`üéß Sent ${full.length} samples`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤
function concat(chunks) {
  const total = chunks.reduce((a, b) => a + b.length, 0);
  const out = new Float32Array(total);
  let offset = 0;
  for (const part of chunks) {
    out.set(part, offset);
    offset += part.length;
  }
  return out;
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
function log(msg) {
  console.log(msg);
}
