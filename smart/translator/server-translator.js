import fs from "fs";
import path from "path";
import express from "express";
import { WebSocketServer } from "ws";
import fetch from "node-fetch";
import FormData from "form-data";

// === –ù–ê–°–¢–†–û–ô–ö–ò ===
const PORT = 4000; // üîπ —Å–≤–æ–π –ø–æ—Ä—Ç
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const ROOT = path.resolve(".");
const BASE_URL = `http://localhost:${PORT}`;
const APP_DIR = path.join(ROOT, "translator");

const app = express();
app.use(express.json());
app.use(express.static(APP_DIR)); // –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫—É translator

// === –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏—à–∏–Ω—ã ===
const SILENCE_THRESHOLD = 0.01; // –ü–æ—Ä–æ–≥ –¥–ª—è –∞–º–ø–ª–∏—Ç—É–¥—ã, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—á–∏—Ç–∞–µ–º —Ç–∏—à–∏–Ω–æ–π

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏—à–∏–Ω—ã –≤ —á–∞–Ω–∫ –¥–∞–Ω–Ω—ã—Ö
function isSilence(chunk) {
  let totalAmplitude = 0;
  let sampleCount = chunk.length; // –¢–µ–ø–µ—Ä—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å—ç–º–ø–ª—ã —á–∞–Ω–∫–∞ (1 —Å–µ–∫—É–Ω–¥–∞)

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—ç–º–ø–ª–∞–º —á–∞–Ω–∫–∞ –∏ —Å—É–º–º–∏—Ä—É–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É
  for (let i = 0; i < sampleCount; i++) {
    totalAmplitude += Math.abs(chunk[i]); // –°—É–º–º–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞–º–ø–ª–∏—Ç—É–¥—ã
  }

  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –∞–º–ø–ª–∏—Ç—É–¥—É
  const averageAmplitude = totalAmplitude / sampleCount;

  // –õ–æ–≥–∏—Ä—É–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É —á–∞–Ω–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log(`–ê–º–ø–ª–∏—Ç—É–¥–∞ —á–∞–Ω–∫–∞: ${averageAmplitude}`);

  // –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω—è—è –∞–º–ø–ª–∏—Ç—É–¥–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞, —Å—á–∏—Ç–∞–µ–º —á–∞–Ω–∫ —Ç–∏—à–∏–Ω–æ–π
  return averageAmplitude < SILENCE_THRESHOLD;
}

// === –°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê ===
const server = app.listen(PORT, () =>
  console.log(`üöÄ Translator server started on port ${PORT}`)
);
const wss = new WebSocketServer({ server });

// === WebSocket ===
let sessionCounter = 1;
wss.on("connection", (ws) => {
  ws.sampleRate = 44100;
  ws.sessionId = `sess-${sessionCounter++}`;
  ws.chunkCounter = 0;
  ws.send(`SESSION:${ws.sessionId}`);
  console.log(`üéß [translator] New connection: ${ws.sessionId}`);

  ws.on("message", (data) => {
    if (typeof data === "string") {
      try {
        const meta = JSON.parse(data);
        if (meta.type === "meta") {
          ws.sampleRate = meta.sampleRate;
          ws.processMode = meta.processMode;
          ws.langPair = meta.langPair;
          return ws.send(`üéõ Meta ok: ${ws.sampleRate} Hz`);
        }
      } catch {}
    } else {
      const buf = Buffer.from(data);
      const f32 = new Float32Array(buf.buffer, buf.byteOffset, buf.byteLength / 4);

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –∏ –ø–µ—Ä–≤—ã–µ 10 —Å—ç–º–ø–ª–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log(`üì• –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫ —Ä–∞–∑–º–µ—Ä–æ–º: ${f32.length} —Å—ç–º–ø–ª–æ–≤`);
      console.log(`–ü–µ—Ä–≤—ã–µ 10 —Å—ç–º–ø–ª–æ–≤ —á–∞–Ω–∫–∞:`, f32.slice(0, 10));

      // –õ–æ–≥–∏—Ä—É–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      let totalAmplitude = 0;
      for (let i = 0; i < f32.length; i++) {
        totalAmplitude += Math.abs(f32[i]);
      }
      const averageAmplitude = totalAmplitude / f32.length;
      console.log(`üìä –ê–º–ø–ª–∏—Ç—É–¥–∞ —á–∞–Ω–∫–∞: ${averageAmplitude}`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞–Ω–∫ –Ω–∞ —Ç–∏—à–∏–Ω—É –î–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      let chunkDescription;
      if (isSilence(f32)) {
        chunkDescription = "–ø—É—Å—Ç–æ–π";  // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ "–ø—É—Å—Ç–æ–π", –µ—Å–ª–∏ —á–∞–Ω–∫ - —Ç–∏—à–∏–Ω–∞
      } else if (averageAmplitude > SILENCE_THRESHOLD) {
        chunkDescription = "–≥—Ä–æ–º–∫–∏–π";  // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ "–≥—Ä–æ–º–∫–∏–π", –µ—Å–ª–∏ —á–∞–Ω–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–≤—É–∫
      } else {
        chunkDescription = "–Ω–µ –ø–æ–Ω—è—Ç–Ω–æ"; // –ï—Å–ª–∏ –∞–º–ø–ª–∏—Ç—É–¥–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤—ã–≤–æ–¥–∏–º "–Ω–µ –ø–æ–Ω—è—Ç–Ω–æ"
      }

      // –õ–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫–æ–π —á–∞–Ω–∫ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
      console.log(`üéß –ß–∞–Ω–∫ ${chunkDescription}`);

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞–Ω–∫–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      const chunkSize = f32.length;
      console.log(`–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: ${chunkSize} —Å—ç–º–ø–ª–æ–≤ | –°—Ä–µ–¥–Ω—è—è –∞–º–ø–ª–∏—Ç—É–¥–∞: ${averageAmplitude}`);

      const wav = floatToWav(f32, ws.sampleRate);
      const filename = `${ws.sessionId}_chunk_${ws.chunkCounter++}.wav`;
      fs.writeFileSync(filename, wav);

      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞–Ω–∫–∞ —Å –ø–æ–º–µ—Ç–∫–æ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏/—Ç–∏—à–∏–Ω—ã
      console.log(`üì© üíæ Saved ${filename} ‚Äî ${chunkDescription}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞–Ω–∫–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ WebSocket —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º "–¢–ï–°–¢" –æ—Ç–¥–µ–ª—å–Ω–æ
      const message = `üíæ Saved ${filename} ‚Äî ${chunkDescription} | –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: ${chunkSize} —Å—ç–º–ø–ª–æ–≤ | –°—Ä–µ–¥–Ω—è—è –∞–º–ø–ª–∏—Ç—É–¥–∞: ${averageAmplitude}`;
      console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç: ${message} –¢–ï–°–¢`);  // Log before sending
      ws.send(`${message} –¢–ï–°–¢`);  // Send the message to the client with "–¢–ï–°–¢" added separately
    }
  });

  ws.on("close", () => console.log(`‚ùå Closed ${ws.sessionId}`));
});

// === Merge ===
app.get("/merge", (req, res) => {
  try {
    const session = req.query.session;
    if (!session) return res.status(400).send("No session");
    const files = fs.readdirSync(".")
      .filter(f => f.startsWith(`${session}_chunk_`))
      .sort((a, b) => +a.match(/chunk_(\d+)/)[1] - +b.match(/chunk_(\d+)/)[1]);
    if (!files.length) return res.status(404).send("No chunks");

    const headerSize = 44;
    const first = fs.readFileSync(files[0]);
    const sr = first.readUInt32LE(24);
    const pcms = files.map(f => fs.readFileSync(f).subarray(headerSize));
    const totalPCM = Buffer.concat(pcms);
    const merged = makeWav(totalPCM, sr);
    const outFile = `${session}_merged.wav`;
    fs.writeFileSync(outFile, merged);
    res.json({ ok: true, file: `${BASE_URL}/${outFile}` });
  } catch (err) {
    console.error(`‚ùå Merge error: ${err.message}`);
    res.status(500).send(`Merge error: ${err.message}`);
  }
});

// === Whisper ===
app.get("/whisper", async (req, res) => {
  try {
    const { session, langPair } = req.query;
    const file = `${session}_merged.wav`;
    if (!fs.existsSync(file)) return res.status(404).send("No file");

    const form = new FormData();
    form.append("file", fs.createReadStream(file));
    form.append("model", "whisper-1");
    form.append("response_format", "verbose_json");
    form.append("task", "transcribe");

    const r = await fetch("https://api.openai.com/v1/audio/transcriptions", {
      method: "POST",
      headers: { Authorization: `Bearer ${OPENAI_API_KEY}` },
      body: form,
    });

    const data = await r.json();
    let detectedLang = data.language || null;
    const text = data.text || "";

    console.log("üß† Whisper response:", data);
    console.log("üåê Detected language:", detectedLang || "none");

    const [a, b] = (langPair || "en-ru").split("-");
    if (!detectedLang || ![a, b].includes(detectedLang)) {
      console.log(`‚ö†Ô∏è Whisper misdetected (${detectedLang}), checking with GPT...`);
      const prompt = `Text: """${text}"""\nDecide which of these two languages it is written in: ${a} or ${b}. Return only one code (${a} or ${b}).`;
      const check = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          messages: [{ role: "user", content: prompt }],
        }),
      });
      const resCheck = await check.json();
      const corrected = resCheck.choices?.[0]?.message?.content?.trim().toLowerCase();
      if (corrected && [a, b].includes(corrected)) {
        detectedLang = corrected;
        console.log(`üß† GPT corrected language ‚Üí ${detectedLang}`);
      } else {
        console.log("‚ö†Ô∏è GPT could not correct language, fallback to", a);
        detectedLang = a;
      }
    }

    res.json({ text, detectedLang });
  } catch (e) {
    console.error("‚ùå Whisper error:", e.message);
    res.status(500).json({ error: e.message, detectedLang: null, text: "" });
  }
});

// === GPT ===
app.post("/gpt", async (req, res) => {
  try {
    const { text, mode, langPair, detectedLang } = req.body;
    if (!text) return res.status(400).send("No text");

    let prompt = text;
    if (mode === "translate") {
      const [a, b] = langPair.split("-");
      let from;
      if (detectedLang && [a, b].includes(detectedLang)) from = detectedLang;
      else from = a;
      const to = from === a ? b : a;
      prompt = `Translate from ${from.toUpperCase()} to ${to.toUpperCase()}: ${text}`;
    } else if (mode === "assistant") {
      prompt = `Act as a helpful assistant. Reply naturally: ${text}`;
    }

    const r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: prompt }],
      }),
    });

    const data = await r.json();
    res.json({ text: data.choices?.[0]?.message?.content ?? "" });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});

// === TTS ===
app.get("/tts", async (req, res) => {
  try {
    const { text, session, voice } = req.query;
    if (!text) return res.status(400).send("No text");

    const r = await fetch("https://api.openai.com/v1/audio/speech", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o-mini-tts",
        voice: voice || "alloy",
        input: text,
      }),
    });

    const audio = await r.arrayBuffer();
    const file = `${session}_tts.mp3`;
    fs.writeFileSync(file, Buffer.from(audio));
    res.json({ url: `${BASE_URL}/${file}` });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ "–•–û–†–û–®–û" –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const message = "–•–û–†–û–®–û";
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç: ${message}`);
    ws.send(message); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–•–û–†–û–®–û" –Ω–∞ –∫–ª–∏–µ–Ω—Ç
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});

// === Helpers ===
function floatToWav(f32, sampleRate) {
  const buffer = Buffer.alloc(44 + f32.length * 2);
  const view = new DataView(buffer.buffer);
  view.setUint32(0, 0x52494646, false);
  view.setUint32(4, 36 + f32.length * 2, true);
  view.setUint32(8, 0x57415645, false);
  view.setUint32(12, 0x666d7420, false);
  view.setUint32(16, 16, true);
  view.setUint16(20, 1, true);
  view.setUint16(22, 1, true);
  view.setUint32(24, sampleRate, true);
  view.setUint32(28, sampleRate * 2, true);
  view.setUint16(32, 2, true);
  view.setUint16(34, 16, true);
  view.setUint32(36, 0x64617461, false);
  view.setUint32(40, f32.length * 2, true);
  let off = 44;
  for (let i = 0; i < f32.length; i++) {
    let s = Math.max(-1, Math.min(1, f32[i]));
    view.setInt16(off, s < 0 ? s * 0x8000 : s * 0x7fff, true);
    off += 2;
  }
  return buffer;
}

function makeWav(pcm, sr) {
  const header = Buffer.alloc(44);
  header.write("RIFF", 0);
  header.writeUInt32LE(36 + pcm.length, 4);
  header.write("WAVE", 8);
  header.write("fmt ", 12);
  header.writeUInt32LE(16, 16);
  header.writeUInt16LE(1, 20);
  header.writeUInt16LE(1, 22);
  header.writeUInt32LE(sr, 24);
  header.writeUInt32LE(sr * 2, 28);
  header.writeUInt16LE(2, 32);
  header.writeUInt16LE(16, 34);
  header.write("data", 36);
  header.writeUInt32LE(pcm.length, 40);
  return Buffer.concat([header, pcm]);
}
